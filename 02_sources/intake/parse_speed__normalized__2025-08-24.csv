"EVID-20250824-ParseSpeed-Boost-001","Performance — Parse Speed","Boost.JSON","Using a monotonic memory resource, Boost.JSON parsed a 125 KB JSON file ~2.5× faster than with default allocation (740 MB/s vs 290 MB/s on clang)","Parse throughput","740","MB/s","apache_builds.json (125 KB)","Intel Core i7-7700K (4.2 GHz), Windows 10; clang 12.0 -O3; single-thread; Boost JSON 1.83; JSON size 125 KB","https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html","Documentation","Boost","2023-08-11","2025-08-23","DOM parse (monotonic memory pool vs default resource, stream parser reused)"
"EVID-20250824-ParseSpeed-Boost-002","Performance — Parse Speed","Boost.JSON","Boost.JSON’s DOM parser can exceed 1 GB/s on numeric-only JSON: using a monotonic pool it parsed a 147 KB array of floats at 1105 MB/s (clang)","Parse throughput","1105","MB/s","numbers.json (147 KB, array of doubles)","Intel Core i7-7700K, Windows 10; clang 12.0 -O3; single-thread; Boost JSON 1.83; JSON size 147 KB","https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html","Documentation","Boost","2023-08-11","2025-08-23","DOM parse (monotonic memory, incremental parser reused; default fast number parsing)"
"EVID-20250824-ParseSpeed-Boost-003","Performance — Parse Speed","Boost.JSON","Thanks to SSE2-optimized algorithms, Boost.JSON significantly outpaces other libraries on unescaped strings (parsing a ~992 KB strings-only JSON at ~6000 MB/s)","Parse throughput","6002","MB/s","strings.json (~992 KB, long unescaped strings)","Intel Core i7-6950X (3.0 GHz), Windows 10; clang (x64 SSE2) -O3; single-thread; Boost JSON pre-1.75; JSON size ~1 MB","https://230.jsondocs.prtest.cppalliance.org/libs/json/doc/html/json/benchmarks.html","Documentation","Boost","2020-12-11","2025-08-23","DOM parse (monotonic memory, parser reused; input with long unescaped strings)"
"EVID-20250824-ParseSpeed-Boost-004","Performance — Parse Speed","Boost.JSON","Boost.JSON achieved 1120 MB/s parsing a 1.69 MB JSON (citm_catalog) with clang using monotonic resource, approaching RapidJSON’s best 1200 MB/s","Parse throughput","1120","MB/s","citm_catalog.json (1.69 MB, mixed content)","Intel Core i7-7700K, Windows 10; clang 12.0 -O3; single-thread; Boost JSON 1.83; JSON size 1.69 MB","https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html","Documentation","Boost","2023-08-11","2025-08-23","DOM parse (monotonic memory, stream parser reused between parses)"
"EVID-20250824-ParseSpeed-Boost-005","Performance — Parse Speed","Boost.JSON","On JSON with all non-ASCII characters escaped (550 KB input), Boost.JSON (monotonic) reached 567 MB/s parse throughput on clang (vs ~398 MB/s for RapidJSON)","Parse throughput","567","MB/s","twitterescaped.json (550 KB, all \\u Unicode escapes)","Intel Core i7-7700K, Windows 10; clang 12.0 -O3; single-thread; Boost JSON 1.83; JSON size 550 KB","https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html","Documentation","Boost","2023-08-11","2025-08-23","DOM parse (monotonic memory, parser reused; input heavy in Unicode escape sequences)"
"EVID-20250824-ParseSpeed-simdjson-001","Performance — Parse Speed","simdjson","First fully-validating JSON parser to exceed 2 GB/s (reaching 3 GB/s on GSOC-2018)","Throughput","3.0","GB/s","GSOC-2018 JSON file","Intel Skylake (3.4 GHz); GNU GCC 10 -O3; 1 thread; simdjson 0.x (2019); ~60 MB JSON","https://arxiv.org/abs/1902.08318","Research Paper","simdjson","2019-06-01","2025-08-23","DOM (full parse, UTF-8 validating)"
"EVID-20250824-ParseSpeed-simdjson-002","Performance — Parse Speed","simdjson","Version 0.3 improved parsing speed from ~2.2 GB/s to ~2.5 GB/s on a large JSON file","Throughput","2.5","GB/s","twitter.json (social-media dataset)","Intel Skylake (3.4 GHz); GNU GCC -O3; 1 thread; simdjson 0.3 (2020); ~60 MB JSON","https://lemire.me/blog/2020/03/31/we-released-simdjson-0-3-the-fastest-json-parser-in-the-world-is-even-better/","Blog","simdjson","2020-03-31","2025-08-23","DOM (eager full parse)"
"EVID-20250824-ParseSpeed-simdjson-003","Performance — Parse Speed","simdjson","Multithreaded NDJSON (line-delimited JSON) parsing throughput reaches ~3.5 GB/s","Throughput","3.5","GB/s","NDJSON stream (multiple JSON docs)","Intel x64 commodity CPU; GNU C++ -O3; multi-core; simdjson 0.4 (2020); NDJSON log file","https://github.com/simdjson/simdjson","Documentation","simdjson","2020-07-15","2025-08-23","DOM (parse_many API, parallel stage 1/2)"
"EVID-20250824-ParseSpeed-simdjson-004","Performance — Parse Speed","simdjson","On-Demand mode parses partial_tweets JSON at ~6.8 GB/s on a Sapphire Rapids CPU","Throughput","6.83","GB/s","partial_tweets.json (tweets sample)","Intel Xeon Platinum 8488C (Sapphire Rapids 3.4 GHz); GNU GCC 12 -O3; 1 thread; simdjson 3.x (2024); 3 MB JSON","https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/","Blog","simdjson","2024-02-09","2025-08-23","On-Demand (lazy parse, no full DOM materialization)"
"EVID-20250824-ParseSpeed-simdjson-005","Performance — Parse Speed","simdjson","DOM mode parses partial_tweets JSON at ~4.8 GB/s on the same platform","Throughput","4.77","GB/s","partial_tweets.json (tweets sample)","Intel Xeon Platinum 8488C (Sapphire Rapids 3.4 GHz); GNU GCC 12 -O3; 1 thread; simdjson 3.x (2024); 3 MB JSON","https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/","Blog","simdjson","2024-02-09","2025-08-23","DOM (eager parse, full tree materialized)"
"EVID-20250824-ParseSpeed-simdjson-006","Performance — Parse Speed","simdjson","On-Demand parsing with on-the-fly distinct user.id extraction reaches ~7.0 GB/s","Throughput","6.99","GB/s","twitter.json (distinct_user_id query)","Intel Xeon Platinum 8488C (Sapphire Rapids 3.4 GHz); GNU GCC 12 -O3; 1 thread; simdjson 3.x (2024); ~60 MB JSON","https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/","Blog","simdjson","2024-02-09","2025-08-23","On-Demand (parse + distinct key filtering in one pass)"
"EVID-20250824-ParseSpeed-simdjson-007","Performance — Parse Speed","simdjson","DOM parsing plus separate distinct user.id traversal yields ~4.9 GB/s overall","Throughput","4.90","GB/s","twitter.json (distinct_user_id query)","Intel Xeon Platinum 8488C (Sapphire Rapids 3.4 GHz); GNU GCC 12 -O3; 1 thread; simdjson 3.x (2024); ~60 MB JSON","https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/","Blog","simdjson","2024-02-09","2025-08-23","DOM (full parse, then in-memory distinct extraction)"
"EVID-20250824-ParseSpeed-nlohmann-001","Performance — Parse Speed","nlohmann/json","Parses at ~0.1 GB/s (~100 MB/s) on a 617 KB Twitter JSON","Throughput","0.1","GB/s","twitter.json","Intel Skylake 3.4 GHz, Linux; g++ 8 -O3; 1 thread; nlohmann/json v3.x; 617 KB","https://phlip9.com/notes/performance/simdjson%20talk/","Blog","nlohmann/json","2019-08-02","2025-08-24","DOM parse, single-threaded"
"EVID-20250824-ParseSpeed-nlohmann-002","Performance — Parse Speed","nlohmann/json","~137 MB/s parsing throughput on a 617 KB Twitter API JSON","Throughput","137","MB/s","twitter.json","Intel Core i7-7700K 4.2 GHz, Windows 10; Clang 12.0 -O3; 1 thread; nlohmann/json v3.x; 617 KB","https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html","Library Documentation","nlohmann/json","2020-12-11","2025-08-24","DOM parse, single-threaded"
"EVID-20250824-ParseSpeed-nlohmann-003","Performance — Parse Speed","nlohmann/json","~86 MB/s parsing speed on a 499 KB JSON with many non-ASCII characters","Throughput","86","MB/s","random.json","Intel Core i7-7700K 4.2 GHz, Windows 10; Clang 12.0 -O3; 1 thread; nlohmann/json v3.x; 499 KB","https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html","Library Documentation","nlohmann/json","2020-12-11","2025-08-24","DOM parse, full UTF-8 validation"
"EVID-20250824-ParseSpeed-nlohmann-004","Performance — Parse Speed","nlohmann/json","~63 MB/s parsing speed for a 147 KB array of floating-point numbers","Throughput","63","MB/s","numbers.json","Intel Core i7-7700K 4.2 GHz, Windows 10; Clang 12.0 -O3; 1 thread; nlohmann/json v3.x; 147 KB","https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html","Library Documentation","nlohmann/json","2020-12-11","2025-08-24","DOM parse, heavy numeric content"
"EVID-20250824-ParseSpeed-nlohmann-005","Performance — Parse Speed","nlohmann/json","~55 MB/s parsing speed on a 2.2 MB JSON of coordinate arrays","Throughput","55","MB/s","canada.json","Intel Core i7-7700K 4.2 GHz, Windows 10; Clang 12.0 -O3; 1 thread; nlohmann/json v3.x; 2.2 MB","https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html","Library Documentation","nlohmann/json","2020-12-11","2025-08-24","DOM parse, heavy numeric content"
"EVID-20250824-ParseSpeed-nlohmann-006","Performance — Parse Speed","nlohmann/json","~93 MB/s parsing throughput on a 64 KB GitHub events JSON file","Throughput","0.093","GB/s","github_events.json","Intel Skylake 3.4 GHz, Linux; GCC 8.3 -O3; 1 thread; nlohmann/json v3.x; 64 KB","https://lemire.me/blog/2019/08/02/json-parsing-simdjson-vs-json-for-modern-c/","Blog","nlohmann/json","2019-08-02","2025-08-24","DOM parse, single-threaded"
"EVID-20250824-ParseSpeed-Glaze-001","Performance — Parse Speed","Glaze","Glaze reached ~1081 MB/s JSON parsing speed","Throughput","1081","MB/s","Custom JSON (670 B)","Apple M1 (macOS); Clang 15; 1,000,000 iterations, 1 thread; Glaze main (Dec 22, 2023); JSON 670 B","https://github.com/stephenberry/json_performance/blob/ebdbe28bc17a0e9e0bb000a8de93ac3c239e1016/README.md","GitHub README","Glaze","2023-12-22","2025-08-24","Full JSON parse (in-memory struct)"
"EVID-20250824-ParseSpeed-Glaze-002","Performance — Parse Speed","Glaze","Glaze achieved ~1175 MB/s JSON parse throughput by April 2024","Throughput","1175","MB/s","Custom JSON (670 B)","Apple M1 (macOS); Clang 15; 1,000,000 iterations, 1 thread; Glaze main (Apr 22, 2024); JSON 670 B","https://github.com/stephenberry/json_performance/blob/ebdbe28bc17a0e9e0bb000a8de93ac3c239e1016/README.md","GitHub README","Glaze","2024-04-22","2025-08-24","Full JSON parse (in-memory struct)"
"EVID-20250824-ParseSpeed-Glaze-003","Performance — Parse Speed","Glaze","Glaze reached ~1096 MB/s JSON parse throughput","Throughput","1096","MB/s","Custom JSON (670 B)","Apple M1 (macOS); Clang 15; 1,000,000 iterations, 1 thread; Glaze main (May 13, 2024); JSON 670 B","https://github.com/stephenberry/json_performance/blob/55a77de5f4fdd714e18e4e7736bbbbde6a7f593a/README.md","GitHub README","Glaze","2024-05-13","2025-08-24","Full JSON parse (in-memory struct)"
"EVID-20250824-ParseSpeed-Glaze-004","Performance — Parse Speed","Glaze","Glaze parsed JSON at ~1173 MB/s (single-threaded)","Throughput","1173","MB/s","Custom JSON (670 B)","Apple M1 (macOS); Clang 15; 1,000,000 iterations, 1 thread; Glaze main (July 17, 2024); JSON 670 B","https://github.com/stephenberry/json_performance/blob/55a77de5f4fdd714e18e4e7736bbbbde6a7f593a/README.md","GitHub README","Glaze","2024-07-17","2025-08-24","Full JSON parse (in-memory struct)"
"EVID-20250824-ParseSpeed-Glaze-005","Performance — Parse Speed","Glaze","Glaze JSON parse speed peaked at ~1224 MB/s on single core","Throughput","1224","MB/s","Custom JSON (670 B)","Apple M1 (macOS); Clang 15; 1,000,000 iterations, 1 thread; Glaze main (Aug 9, 2024); JSON 670 B","https://github.com/stephenberry/json_performance/blob/9f67fde8f993a0f6bafa15c5d043c3e92dc50f10/README.md","GitHub README","Glaze","2024-08-09","2025-08-24","Full JSON parse (in-memory struct)"
"EVID-20250824-ParseSpeed-Glaze-006","Performance — Parse Speed","Glaze","Glaze sustains ~1200 MB/s JSON parse throughput on Apple M1","Throughput","1200","MB/s","Custom JSON (670 B)","Apple M1 (macOS); Clang 17; 1,000,000 iterations, 1 thread; Glaze main (June 8, 2025); JSON 670 B","https://github.com/stephenberry/json_performance/blob/a1b6bd7c0d1fe50e212635861cf9b47c69f2ab50/README.md","GitHub README","Glaze","2025-06-08","2025-08-24","Full JSON parse (in-memory struct)"
"EVID-20250824-ParseSpeed-Glaze-007","Performance — Parse Speed","Glaze","Glaze parses out-of-order JSON keys at ~1219 MB/s","Throughput","1219","MB/s","26-key reverse-order JSON (~100 KB)","Apple M1 (macOS); Clang 17; 1,000,000 iterations, 1 thread; Glaze main (June 8, 2025); JSON ~100 KB","https://github.com/stephenberry/json_performance/blob/a1b6bd7c0d1fe50e212635861cf9b47c69f2ab50/README.md","GitHub README","Glaze","2025-06-08","2025-08-24","Full JSON parse (out-of-order keys test)"
