,“Performance — Parse Speed”,“simdjson”,“First fully-validating JSON parser to exceed 2 GB/s (reaching 3 GB/s on GSOC-2018) ￼”,“Throughput”,“3.0”,“GB/s”,“GSOC-2018 JSON file”,“Intel Skylake (3.4 GHz); GNU GCC 10 -O3; 1 thread; simdjson 0.x (2019); ~60 MB JSON”,“https://arxiv.org/abs/1902.08318”,“Research Paper”,“simdjson”,“2019-06-01”,“2025-08-23”,“DOM (full parse, UTF-8 validating)”
,“Performance — Parse Speed”,“simdjson”,“Version 0.3 improved parsing speed from ~2.2 GB/s to ~2.5 GB/s on a large JSON file ￼”,“Throughput”,“2.5”,“GB/s”,“twitter.json (social-media dataset)”,“Intel Skylake (3.4 GHz); GNU GCC -O3; 1 thread; simdjson 0.3 (2020); ~60 MB JSON”,“https://lemire.me/blog/2020/03/31/we-released-simdjson-0-3-the-fastest-json-parser-in-the-world-is-even-better/”,“Blog”,“simdjson”,“2020-03-31”,“2025-08-23”,“DOM (eager full parse)”
,“Performance — Parse Speed”,“simdjson”,“Multithreaded NDJSON (line-delimited JSON) parsing throughput reaches ~3.5 GB/s ￼ ￼”,“Throughput”,“3.5”,“GB/s”,“NDJSON stream (multiple JSON docs)”,“Intel x64 commodity CPU; GNU C++ -O3; multi-core; simdjson 0.4 (2020); NDJSON log file”,“https://github.com/simdjson/simdjson”,“Documentation”,“simdjson”,“2020-07-15”,“2025-08-23”,“DOM (parse_many API, parallel stage 1/2)”
,“Performance — Parse Speed”,“simdjson”,“On-Demand mode parses “partial_tweets” JSON at ~6.8 GB/s on a Sapphire Rapids CPU ￼”,“Throughput”,“6.83”,“GB/s”,“partial_tweets.json (tweets sample)”,“Intel Xeon Platinum 8488C (Sapphire Rapids 3.4 GHz); GNU GCC 12 -O3; 1 thread; simdjson 3.x (2024); 3 MB JSON”,“https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/”,“Blog”,“simdjson”,“2024-02-09”,“2025-08-23”,“On-Demand (lazy parse, no full DOM materialization)”
,“Performance — Parse Speed”,“simdjson”,“DOM mode parses “partial_tweets” JSON at ~4.8 GB/s on the same platform ￼”,“Throughput”,“4.77”,“GB/s”,“partial_tweets.json (tweets sample)”,“Intel Xeon Platinum 8488C (Sapphire Rapids 3.4 GHz); GNU GCC 12 -O3; 1 thread; simdjson 3.x (2024); 3 MB JSON”,“https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/”,“Blog”,“simdjson”,“2024-02-09”,“2025-08-23”,“DOM (eager parse, full tree materialized)”
,“Performance — Parse Speed”,“simdjson”,“On-Demand parsing with on-the-fly distinct user.id extraction reaches ~7.0 GB/s ￼”,“Throughput”,“6.99”,“GB/s”,“twitter.json (distinct_user_id query)”,“Intel Xeon Platinum 8488C (Sapphire Rapids 3.4 GHz); GNU GCC 12 -O3; 1 thread; simdjson 3.x (2024); ~60 MB JSON”,“https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/”,“Blog”,“simdjson”,“2024-02-09”,“2025-08-23”,“On-Demand (parse + distinct key filtering in one pass)”
,“Performance — Parse Speed”,“simdjson”,“DOM parsing plus separate distinct user.id traversal yields ~4.9 GB/s overall ￼”,“Throughput”,“4.90”,“GB/s”,“twitter.json (distinct_user_id query)”,“Intel Xeon Platinum 8488C (Sapphire Rapids 3.4 GHz); GNU GCC 12 -O3; 1 thread; simdjson 3.x (2024); ~60 MB JSON”,“https://lemire.me/blog/2024/02/09/json-parsing-intel-sapphire-rapids-versus-amd-zen-4/”,“Blog”,“simdjson”,“2024-02-09”,“2025-08-23”,“DOM (full parse, then in-memory distinct extraction)”
