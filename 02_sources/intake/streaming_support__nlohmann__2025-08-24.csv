1,Streaming Support,nlohmann/json,Provides a SAX (event-driven) parsing interface; users can implement a handler and call json::sax_parse on any input source (e.g., string or stream) to receive parse events.,SAX parser available,Yes,,,Official documentation,https://github.com/nlohmann/json,GitHub README,Niels Lohmann (JSON for Modern C++),2020-12-07,2025-08-23,
2,Streaming Support,nlohmann/json,No support for incremental (partial) parsing – the library cannot parse a truncated JSON and resume later.,Incremental parsing,No,,,Expert Q&A,https://www.reddit.com/r/cpp_questions/comments/goppg8/nlohmannjson_how_to_parse_a_stream_of_json_objects/,Forum (Reddit),Reddit user Xeverous,2020-05-22,2025-08-23,"Must accumulate incoming data until a full JSON is available; a partial JSON yields a parse error."
3,Streaming Support,nlohmann/json,The parser expects a single JSON value per input; multiple JSON values in one stream (e.g., JSON Lines/NDJSON) are treated as invalid JSON.,Multiple JSON in stream,Not directly supported,,,Official documentation,https://json.nlohmann.me/features/parsing/json_lines/,Documentation,JSON for Modern C++ docs,2021-03-29,2025-08-23,"Parsing stops only after complete JSON; using operator>> in a loop fails as it attempts to parse beyond the last value."
4,Streaming Support,nlohmann/json,No pull/iterator-based parser is provided – the library offers DOM parsing and SAX (push) events, but no on-demand incremental parsing API.,Pull parser (on-demand),No,,,Comparative documentation,https://www.boost.org/doc/libs/1_85_0/libs/json/doc/html/json/comparison.html,Boost JSON docs,Boost (Vinnie Falco et al.),2022-06-08,2025-08-23,
5,Streaming Support,nlohmann/json,Does not support incremental or streaming serialization; JSON output is generated in one shot (no partial flush).,Incremental serialization,No,,,Comparative documentation,https://www.boost.org/doc/libs/1_85_0/libs/json/doc/html/json/comparison.html,Boost JSON docs,Boost (Vinnie Falco et al.),2022-06-08,2025-08-23,
6,Streaming Support,nlohmann/json,Objects are by default stored in std::map (keys ordered lexicographically); an ordered_json type is available which preserves the insertion order of object keys.,Preserve key order,Optional (with ordered_json),,,Official documentation,https://json.nlohmann.me/api/ordered_json/,Documentation,JSON for Modern C++ docs,2020-09-01,2025-08-23,
7,Streaming Support,nlohmann/json,Supports direct serialization to C++ streams via operator<< (uses dump() internally; std::setw controls indentation).,Output to std::ostream,Yes,,,Official documentation,https://json.nlohmann.me/api/operator_ltlt/,Documentation,JSON for Modern C++ docs,2020-09-01,2025-08-23,
8,Streaming Support,nlohmann/json,On parse errors in DOM mode, the library throws exceptions (e.g., json::parse_error.101 for unexpected end-of-input) with a descriptive message.,Error reporting (DOM),Exception with code,,,Official documentation,https://json.nlohmann.me/home/exceptions/,Documentation,JSON for Modern C++ docs,2020-02-02,2025-08-23,
9,Streaming Support,nlohmann/json,In SAX parsing mode, no exception is thrown on parse errors – the error is reported via the SAX handler’s parse_error callback and sax_parse returns false.,Error reporting (SAX),Callback (no throw),,,Official documentation,https://github.com/nlohmann/json,GitHub README,Niels Lohmann (JSON for Modern C++),2020-12-07,2025-08-23,
10,Streaming Support,nlohmann/json,Flexible input sources: parse from std::istream (operator>>) or iterator ranges of bytes (UTF-8/16/32).,Input source types,"istream, iterator",,,Official documentation,https://github.com/nlohmann/json,GitHub README,Niels Lohmann (JSON for Modern C++),2019-09-16,2025-08-23,
