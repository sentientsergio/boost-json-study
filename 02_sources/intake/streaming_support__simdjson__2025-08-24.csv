“1”,“Streaming Support”,“simdjson”,“No SAX (event-based) API is provided; instead simdjson offers the On Demand API for on-the-fly parsing, but input must be in-memory (complete JSON string) ￼”,“SAX API”,“Not available”,””,””,“Developer Q&A”,” ￼”,“GitHub Discussion”,“simdjson project”,“2022-12-01”,“2025-08-23”,””
“2”,“Streaming Support”,“simdjson”,“The On Demand parser operates in streaming mode, using memory proportional only to the JSON document’s depth (highest nesting level) rather than total elements ￼”,“Memory usage scaling”,“Depends on depth”,””,””,“Expert commentary”,” ￼”,“Hacker News”,“Unum (developer comment)”,“2023-03-06”,“2025-08-23”,””
“3”,“Streaming Support”,“simdjson”,“A single simdjson parser instance can be reused across multiple JSON documents to avoid repeated memory allocation, as the parser retains and reuses its internal buffers ￼”,“Parser reuse”,“Recommended”,””,””,“Design documentation”,” ￼”,“Research Paper”,“Université du Québec”,“2023-12-30”,“2025-08-23”,””
“4”,“Streaming Support”,“simdjson”,“Simdjson supports parsing multiple JSON documents in one input (NDJSON/JSON Lines) via the parse_many (DOM) or iterate_many (On Demand) API, which returns a document_stream for iterating over each JSON object ￼ ￼”,“NDJSON support”,“Yes”,””,””,“Documentation”,” ￼ ￼”,“Technical Blog”,“CSDN (Translated Doc)”,“2025-08-15”,“2025-08-23”,“Prefer simdjson v3.x API”
“5”,“Streaming Support”,“simdjson”,“The iterate_many/parse_many interface processes input in chunks of a given batch_size (default ~1 MB); batch_size must exceed the size of any single JSON document in the stream, otherwise parsing cannot complete that document ￼. After iteration, any incomplete JSON at the end is reported via truncated_bytes() ￼”,“Min. batch >= max doc size”,“Required”,””,””,“Documentation”,” ￼ ￼”,“Technical Blog”,“CSDN (Translated Doc)”,“2025-08-15”,“2025-08-23”,””
“6”,“Streaming Support”,“simdjson”,“By default, simdjson refuses to parse JSON that exceeds a nesting depth of 1024 levels ￼”,“Max nesting depth”,“1024”,“levels”,””,“Documentation”,” ￼”,“Official Docs”,“simdjson project”,“2019-07-01”,“2025-08-23”,“Limit unchanged in v2.x”
“7”,“Streaming Support”,“simdjson”,“JSON input must be stored in contiguous memory with extra padding; simdjson requires a padding of SIMDJSON_PADDING bytes (currently 32 bytes) at the end of the data to safely use SIMD instructions ￼”,“Required padding”,“32”,“bytes”,””,“StackOverflow Q&A”,” ￼”,“Stack Overflow”,“Community (user post)”,“2024-12-09”,“2025-08-23”,””
“8”,“Streaming Support”,“simdjson”,“Fully validates UTF-8 encoding during parse; capable of validating UTF-8 input at speeds up to 13 GB/s using SIMD ￼”,“UTF-8 validation speed”,“13”,“GB/s”,“Synthetic benchmark”,“Benchmark (Skylake CPU)”,” ￼”,“GitHub README”,“simdjson project”,“2021-05-01”,“2025-08-23”,“Performance on Intel Skylake”
“9”,“Streaming Support”,“simdjson”,“On parse errors, simdjson returns an error code but does not provide the exact location (offset) of the error in the input ￼”,“Error position feedback”,“Not provided”,””,””,“Documentation”,” ￼”,“Official Docs”,“simdjson project”,“2021-07-15”,“2025-08-23”,“Applies to On Demand API (no error offset reporting)”
“10”,“Streaming Support”,“simdjson”,“Simdjson can parse newline-delimited JSON extremely fast – it achieves about 3.5 GB/s throughput on NDJSON data ￼”,“NDJSON parse throughput”,“3.5”,“GB/s”,“Various JSON files”,“Benchmark”,” ￼”,“GitHub README”,“simdjson project”,“2021-05-01”,“2025-08-23”,“Single-core throughput (simdjson On Demand)”
