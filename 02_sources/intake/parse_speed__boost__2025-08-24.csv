,“Performance — Parse Speed”,“Boost.JSON”,“Using a monotonic memory resource, Boost.JSON parsed a 125 KB JSON file ~2.5× faster than with default allocation (740 MB/s vs 290 MB/s on clang) ￼”,“Parse throughput”,“740”,“MB/s”,“apache_builds.json (125 KB)”,“Intel Core i7-7700K (4.2 GHz), Windows 10; clang 12.0 -O3; single-thread; Boost JSON 1.83; JSON size 125 KB”,“https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html”,“Documentation”,“Boost”,“2023-08-11”,“2025-08-23”,“DOM parse (monotonic memory pool vs default resource, stream parser reused)”
,“Performance — Parse Speed”,“Boost.JSON”,“Boost.JSON’s DOM parser can exceed 1 GB/s on numeric-only JSON: using a monotonic pool it parsed a 147 KB array of floats at 1105 MB/s (clang) ￼”,“Parse throughput”,“1105”,“MB/s”,“numbers.json (147 KB, array of doubles)”,“Intel Core i7-7700K, Windows 10; clang 12.0 -O3; single-thread; Boost JSON 1.83; JSON size 147 KB”,“https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html”,“Documentation”,“Boost”,“2023-08-11”,“2025-08-23”,“DOM parse (monotonic memory, incremental parser reused; default fast number parsing)”
,“Performance — Parse Speed”,“Boost.JSON”,“Thanks to SSE2-optimized algorithms, Boost.JSON significantly outpaces other libraries on unescaped strings (parsing a ~992 KB strings-only JSON at ~6000 MB/s) ￼”,“Parse throughput”,“6002”,“MB/s”,“strings.json (~992 KB, long unescaped strings)”,“Intel Core i7-6950X (3.0 GHz), Windows 10; clang (×64 SSE2) -O3; single-thread; Boost JSON pre-1.75; JSON size ~1 MB”,“https://230.jsondocs.prtest.cppalliance.org/libs/json/doc/html/json/benchmarks.html”,“Documentation”,“Boost”,“2020-12-11”,“2025-08-23”,“DOM parse (monotonic memory, parser reused; input with long unescaped strings)”
,“Performance — Parse Speed”,“Boost.JSON”,“Boost.JSON achieved 1120 MB/s parsing a 1.69 MB JSON (citm_catalog) with clang using monotonic resource, approaching RapidJSON’s best 1200 MB/s ￼”,“Parse throughput”,“1120”,“MB/s”,“citm_catalog.json (1.69 MB, mixed content)”,“Intel Core i7-7700K, Windows 10; clang 12.0 -O3; single-thread; Boost JSON 1.83; JSON size 1.69 MB”,“https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html”,“Documentation”,“Boost”,“2023-08-11”,“2025-08-23”,“DOM parse (monotonic memory, stream parser reused between parses)”
,“Performance — Parse Speed”,“Boost.JSON”,“On JSON with all non-ASCII characters escaped (550 KB input), Boost.JSON (monotonic) reached 567 MB/s parse throughput on clang (vs ~398 MB/s for RapidJSON) ￼”,“Parse throughput”,“567”,“MB/s”,“twitterescaped.json (550 KB, all \u Unicode escapes)”,“Intel Core i7-7700K, Windows 10; clang 12.0 -O3; single-thread; Boost JSON 1.83; JSON size 550 KB”,“https://www.boost.org/doc/libs/1_83_0/libs/json/doc/html/json/benchmarks.html”,“Documentation”,“Boost”,“2023-08-11”,“2025-08-23”,“DOM parse (monotonic memory, parser reused; input heavy in Unicode escape sequences)”
