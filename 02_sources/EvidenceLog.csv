evidence_id,topic,library,claim,metric,value,unit,dataset_or_code,method,source_url,source_type,author_org,pub_date,retrieved_date,notes
e1,Standard Compliance,Boost.JSON,"Boost.JSON implements JSON as standardized in RFC 8259","guarantee equal serialize-parse round-trip","parse → serialize → parse equals original","value round-trip","documentation refers to RFC 8259 for standard format","https://www.boost.org/library/latest/json/, retrieved_date:2025-08-08","web","Boost","2025-08-08","Library ensures any value serialized can be deserialized back equal to original, per docs referencing RFC 8259"
e2,Standard Compliance,Boost.JSON,"By default the parser only accepts strictly conforming JSON (UTF-8)","strict mode","boolean true","parse_options default settings","https://www.boost.org/doc/libs/1_88_0_beta1/libs/json/doc/html/json/ref/boost__json__basic_parser.html, retrieved_date:2025-08-08","web","Boost","2025-08-08","Default parser accepts only RFC-compliant UTF-8 JSON unless parse_options relaxations used"
e3,Standard Compliance,Boost.JSON,"The parser behavior can be relaxed to allow non-standard syntax like comments or trailing commas","opt-in extensions","allow_comments, allow_trailing_commas","flag settings in parse_options","https://www.boost.org/doc/libs/1_80_0/libs/json/doc/html/json/quick_look.html, retrieved_date:2025-08-08","web","Boost","2025-08-08","Non-standard syntax allowed only when parse_options flags are explicitly set"
e4,Standard Compliance,Boost.JSON,"Boost.JSON implements JSON per the definition and spec of RFC 8259","standard referenced","RFC 8259 compliance","documentation statements","https://www.boost.org/doc/libs/1_88_0/library/latest/json/, retrieved_date:2025-08-08","web","Boost","2025-08-08","Overview states library implements JSON standardized in RFC 8259"
e5,Standard Compliance,Glaze,“Glaze requires C++23; uses concepts and standard-compliant code”,“requirement”,“C++23”,“language standard”,“documentation features list”,“https://sourceforge.net/projects/glaze.mirror/, retrieved_date:2025-08-08”,“web”,“Glaze”,“2025-08-08”,“Docs state Glaze requires C++23 and uses concepts for cleaner code”
e6,Standard Compliance,Glaze,“Glaze tested on GCC, Clang, MSVC across Linux, macOS, Windows”,“testing platforms support”,“GCC, Clang, MSVC”,“platforms”,“compiler/system support section”,“https://github.com/stephenberry/glaze (GitHub home via SF mirror), retrieved_date:2025-08-08”,“web”,“Glaze”,“2025-08-08”,“Docs list support on multiple compilers and OS”
e7,Standard Compliance,Glaze,“Glaze serializes/deserializes directly from C++ memory with in-memory JSON”,“operation mode”,“in-memory serialization”,“mode”,“features list”,“https://sourceforge.net/projects/glaze.mirror/, retrieved_date:2025-08-08”,“web”,“Glaze”,“2025-08-08”,“Describes direct memory reads/writes simplifying interface”
e8,Standard Compliance,Glaze,“By default Glaze errors on unknown extra JSON keys; opt-in flag allows skipping unknown keys”,“error behavior”,“error_on_unknown_keys default true”,“flag”,“blog comparison”,“https://clehaxze.tw/gemlog/2024/06-09-compare-nlohmann-json-to-glaze.gmi, retrieved_date:2025-08-08”,“web”,“Martin Chang blog”,“2024-06-09”,“Extra keys cause error unless opts{.error_on_unknown_keys = false} set”
e9,Standard Compliance,nlohmann/json,"Supports only UTF-8 (default), per RFC 8259","encoding support","UTF-8 only","supported encoding","FAQ page","https://json.nlohmann.me/home/faq/, retrieved_date:2025-08-08","web","nlohmann/json","2025-08-08","Only UTF-8 input is supported, as per default JSON spec"
e10,Standard Compliance,nlohmann/json,"Does not support comments by default (non-standard)","comment support default","false","flag","docs feature explanation","https://github.com/nlohmann/json, retrieved_date:2025-08-08","web","nlohmann/json","2025-08-08","Comments disallowed unless ignore_comments set true"
e11,Standard Compliance,nlohmann/json,"Does not allow trailing commas by default (non-standard)","trailing commas default","false","flag","docs feature explanation","https://json.nlohmann.me/features/trailing_commas/, retrieved_date:2025-08-08","web","nlohmann/json","2025-08-08","Trailing commas disallowed unless ignore_trailing_commas true"
e12,Standard Compliance,nlohmann/json,"parse() takes ignore_comments and ignore_trailing_commas flags","opts available","ignore_comments, ignore_trailing_commas","flags","API documentation","https://json.nlohmann.me/api/basic_json/parse/, retrieved_date:2025-08-08","web","nlohmann/json","2025-08-08","Flags are opt-in to relax compliance"
e13,Standard Compliance,nlohmann/json,"Objects treated as unordered per JSON spec; insertion order not preserved","object order behavior","unordered by default","behavior","docs clarification","https://github.com/nlohmann/json, retrieved_date:2025-08-08","web","nlohmann/json","2025-08-08","Insertion order not preserved unless using ordered_json"
e14,Standard Compliance,simdjson,"The simdjson library is fully compliant with the RFC 8259 JSON specification","compliance","full","compliance level","documentation basics page","https://simdjson.org/api/2.0.0/md_doc_basics.html, retrieved_date:2025-08-08","web","simdjson","2025-08-08","Official docs claim full RFC 8259 compliance"
e15,Standard Compliance,simdjson,"simdjson was the first standard-compliant JSON parser to process gigabytes per second on single core","standard-compliant performance","first","milestone","research paper","https://arxiv.org/abs/1902.08318, retrieved_date:2025-08-08","web","simdjson authors","2019-02-22","Paper describes first standard-compliant parser achieving GB/s"
e16,Standard Compliance,simdjson,"simdjson offers full unicode (UTF-8) validation and exact number parsing","validation features","full UTF-8, exact numbers","feature set","GitHub README performance section","https://github.com/simdjson/simdjson, retrieved_date:2025-08-08","web","simdjson","2025-08-08","Readme notes full UTF-8 validation and exact number parsing"
e17,Standard Compliance,simdjson,"Feature request to allow NaN/Infinity parsing is labeled non-JSON extension","deviation","NaN/Infinity not supported by default","behavior","GitHub issue label","https://github.com/simdjson/simdjson/issues/1540, retrieved_date:2025-08-08","web","simdjson","2025-08-08","Non-standard parsing (NaN/Infinity) currently unsupported unless extension"
e18,Standard Compliance,simdjson,"simdjson limits single JSON documents to 4 GiB and refuses larger","size limitation","max 4 GiB","bytes","API basics limitation section","https://simdjson.org/api/0.6.0/md_doc_basics.html, retrieved_date:2025-08-08","web","simdjson","2025-08-08","Enforced document size limit noted in basics"
