evidence_id,topic,library,claim,metric,value,unit,dataset_or_code,method,source_url,source_type,author_org,pub_date,retrieved_date,notes
EVID-20250808-standard-compliance-boost-001,Standard Compliance,Boost.JSON,"Boost.JSON implements JSON as standardized in RFC 8259","guarantee equal serialize-parse round-trip","parse → serialize → parse equals original","value round-trip","documentation refers to RFC 8259 for standard format","https://www.boost.org/library/latest/json/",documentation,Boost,,2025-08-08,"Library ensures any value serialized can be deserialized back equal to original, per docs referencing RFC 8259"
EVID-20250808-standard-compliance-boost-002,Standard Compliance,Boost.JSON,"By default the parser only accepts strictly conforming JSON (UTF-8)","strict mode","boolean true","parse_options default settings","documentation statement","https://www.boost.org/doc/libs/1_88_0_beta1/libs/json/doc/html/json/ref/boost__json__basic_parser.html",documentation,Boost,,2025-08-08,"Default parser accepts only RFC-compliant UTF-8 JSON unless parse_options relaxations used"
EVID-20250808-standard-compliance-boost-003,Standard Compliance,Boost.JSON,"The parser behavior can be relaxed to allow non-standard syntax like comments or trailing commas","opt-in extensions","allow_comments, allow_trailing_commas","flag settings in parse_options","documentation statement","https://www.boost.org/doc/libs/1_80_0/libs/json/doc/html/json/quick_look.html",documentation,Boost,,2025-08-08,"Non-standard syntax allowed only when parse_options flags are explicitly set"
EVID-20250808-standard-compliance-boost-004,Standard Compliance,Boost.JSON,"Boost.JSON implements JSON per the definition and spec of RFC 8259","standard referenced","RFC 8259 compliance","documentation statements","documentation statement","https://www.boost.org/doc/libs/1_88_0/library/latest/json/",documentation,Boost,,2025-08-08,"Overview states library implements JSON standardized in RFC 8259"
EVID-20250808-standard-compliance-glaze-001,Standard Compliance,Glaze,"Glaze requires C++23; uses concepts and standard-compliant code","requirement","C++23","language standard","documentation statement","https://sourceforge.net/projects/glaze.mirror/",documentation,Glaze,,2025-08-08,"Docs state Glaze requires C++23 and uses concepts for cleaner code"
EVID-20250808-standard-compliance-glaze-002,Standard Compliance,Glaze,"Glaze tested on GCC, Clang, MSVC across Linux, macOS, Windows","testing platforms support","GCC, Clang, MSVC","platforms","documentation statement","https://github.com/stephenberry/glaze",documentation,Glaze,,2025-08-08,"Docs list support on multiple compilers and OS"
EVID-20250808-standard-compliance-glaze-003,Standard Compliance,Glaze,"Glaze serializes/deserializes directly from C++ memory with in-memory JSON","operation mode","in-memory serialization","mode","documentation statement","https://sourceforge.net/projects/glaze.mirror/",documentation,Glaze,,2025-08-08,"Describes direct memory reads/writes simplifying interface"
EVID-20250808-standard-compliance-glaze-004,Standard Compliance,Glaze,"By default Glaze errors on unknown extra JSON keys; opt-in flag allows skipping unknown keys","error behavior","error_on_unknown_keys default true","flag","article","https://clehaxze.tw/gemlog/2024/06-09-compare-nlohmann-json-to-glaze.gmi",article,Martin Chang,2024-06-09,2025-08-08,"Extra keys cause error unless opts{.error_on_unknown_keys = false} set"
EVID-20250808-standard-compliance-nlohmann-001,Standard Compliance,nlohmann/json,"Supports only UTF-8 (default), per RFC 8259","encoding support","UTF-8 only","supported encoding","documentation statement","https://json.nlohmann.me/home/faq/",documentation,nlohmann/json,,2025-08-08,"Only UTF-8 input is supported, as per default JSON spec"
EVID-20250808-standard-compliance-nlohmann-002,Standard Compliance,nlohmann/json,"Does not support comments by default (non-standard)","comment support default","false","flag","documentation statement","https://github.com/nlohmann/json",documentation,nlohmann/json,,2025-08-08,"Comments disallowed unless ignore_comments set true"
EVID-20250808-standard-compliance-nlohmann-003,Standard Compliance,nlohmann/json,"Does not allow trailing commas by default (non-standard)","trailing commas default","false","flag","documentation statement","https://json.nlohmann.me/features/trailing_commas/",documentation,nlohmann/json,,2025-08-08,"Trailing commas disallowed unless ignore_trailing_commas true"
EVID-20250808-standard-compliance-nlohmann-004,Standard Compliance,nlohmann/json,"parse() takes ignore_comments and ignore_trailing_commas flags","opts available","ignore_comments, ignore_trailing_commas","flags","documentation statement","https://json.nlohmann.me/api/basic_json/parse/",documentation,nlohmann/json,,2025-08-08,"Flags are opt-in to relax compliance"
EVID-20250808-standard-compliance-nlohmann-005,Standard Compliance,nlohmann/json,"Objects treated as unordered per JSON spec; insertion order not preserved","object order behavior","unordered by default","behavior","documentation statement","https://github.com/nlohmann/json",documentation,nlohmann/json,,2025-08-08,"Insertion order not preserved unless using ordered_json"
EVID-20250808-standard-compliance-simdjson-001,Standard Compliance,simdjson,"The simdjson library is fully compliant with the RFC 8259 JSON specification","compliance","full","compliance level","documentation statement","https://simdjson.org/api/2.0.0/md_doc_basics.html",documentation,simdjson,,2025-08-08,"Official docs claim full RFC 8259 compliance"
EVID-20250808-standard-compliance-simdjson-002,Standard Compliance,simdjson,"simdjson was the first standard-compliant JSON parser to process gigabytes per second on single core","standard-compliant performance","first","milestone","paper","https://arxiv.org/abs/1902.08318",paper,simdjson authors,2019-02-22,2025-08-08,"Paper describes first standard-compliant parser achieving GB/s"
EVID-20250808-standard-compliance-simdjson-003,Standard Compliance,simdjson,"simdjson offers full unicode (UTF-8) validation and exact number parsing","validation features","full UTF-8, exact numbers","feature set","documentation statement","https://github.com/simdjson/simdjson",documentation,simdjson,,2025-08-08,"Readme notes full UTF-8 validation and exact number parsing"
EVID-20250808-standard-compliance-simdjson-004,Standard Compliance,simdjson,"Feature request to allow NaN/Infinity parsing is labeled non-JSON extension","deviation","NaN/Infinity not supported by default","behavior","issue discussion","https://github.com/simdjson/simdjson/issues/1540",issue,simdjson,,2025-08-08,"Non-standard parsing (NaN/Infinity) currently unsupported unless extension"
EVID-20250808-standard-compliance-simdjson-005,Standard Compliance,simdjson,"simdjson limits single JSON documents to 4 GiB and refuses larger","size limitation","max 4 GiB","bytes","documentation statement","https://simdjson.org/api/0.6.0/md_doc_basics.html",documentation,simdjson,,2025-08-08,"Enforced document size limit noted in basics"

